# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  appartmentNumber: Float!
  id: ID!
  street: String!
  zipCode: String!
}

input AddressInput {
  appartmentNumber: Float
  id: Float
  street: String
  zipCode: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Event {
  address: Address!
  date: DateTime!
  id: ID!
  images: [Image!]!
  organizer: Organization!
  title: String!
  url: String!
}

input EventInput {
  address: AddressInput
  date: DateTime
  id: Float
  organizerId: Float
  title: String
  url: String
}

type Image {
  event: Event!
  id: ID!
  path: String!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
}

type Mutation {
  addEvent(event: EventInput!): Event!
  addImageToEvent(eventId: Float!, pictures: [Upload!]!): Boolean!
  addOrganization(organization: OrganizationInput!): Organization!
  deleteImage(listOfImageIds: [Float!]!): Boolean!
  editEvent(event: EventInput!): Event!
  editOrganization(organization: OrganizationInput!): Organization!
  getNewAccessToken(refreshToken: String!): LoginResponse!
  login(password: String!, username: String!): LoginResponse!
  register(user: UserInput!): Boolean!
}

type Organization {
  address: Address!
  events: [Event!]!
  id: ID!
  name: String!
  url: String!
}

input OrganizationInput {
  addressInput: AddressInput
  id: Float
  name: String
  url: String
}

type Query {
  getAllEvents: [Event!]!
  getAllEventsForOrganization(organizationId: Float!): [Event!]!
  getEventById(id: Float!): Event!
  getOrganizationById(id: Float!): Organization!
  getOrganizations: [Organization!]!
  searchForEvents(text: String!): [Event!]!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserInput {
  password: String!
  username: String!
}
