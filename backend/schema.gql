# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  appartmentNumber: Float!
  city: City!
  country: Country!
  id: ID!
  latitude: Float!
  longitude: Float!
  postalCode: String!
  province: Province!
  street: String!
}

input AddressInput {
  appartmentNumber: Float
  city: City
  country: Country
  postalCode: String
  province: Province
  street: String
}

enum City {
  Kirkland
  Montreal
}

input CoordinatesInput {
  latitude: Float!
  longitude: Float!
}

enum Country {
  Canada
}

input CursorInput {
  after: ID
  first: Float
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Edge {
  cursor: String!
  node: INode!
}

type Event implements INode {
  address: Address!
  date: DateTime!
  description: String!
  id: ID!
  images: [Image!]!
  organizer: Organization!
  title: String!
  url: String!
}

input EventInput {
  address: AddressInput
  date: DateTime
  description: String
  title: String
  url: String
}

interface INode {
  id: ID!
}

type Image {
  event: Event!
  id: ID!
  path: String!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
}

input LoginUserInput {
  password: String!
  username: String!
}

type Mutation {
  addEvent(event: EventInput!): Event!
  addImageToEvent(eventId: String!, pictures: [Upload!]!): Boolean!
  addOrganization(organization: OrganizationInput!): Organization!
  deleteImages(imageIds: [String!]!): Boolean!
  editEvent(event: EventInput!, eventId: ID!): Event!
  editOrganization(organization: OrganizationInput!, organizationId: ID!): Organization!
  login(user: LoginUserInput!): LoginResponse!
  logout(accessToken: String!): Boolean!
  registerRegularUser(user: RegisterUserInput!): Boolean!
}

type Organization {
  address: Address!
  events: [Event!]!
  id: ID!
  name: String!
  url: String!
  user: User!
}

input OrganizationInput {
  address: AddressInput
  name: String
  url: String
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type PaginatedResponseClass {
  edges: [Edge!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

enum Province {
  Quebec
}

type Query {
  getAllEventsForOrganization(organizationId: ID!): [Event!]!
  getEventById(id: ID!): Event!
  getEvents(cursor: CursorInput!): PaginatedResponseClass!
  getEventsAtDistance(distance: Float!): [Event!]!
  getEventsAtDistnace(desiredDistanceInKm: Float!, userCoordinates: CoordinatesInput!): [Event!]!
  getNewAccessToken(refreshToken: String!): LoginResponse!
  getOrganizationById(id: ID!): Organization!
  getOrganizations: [Organization!]!
  isAccessTokenValid(accessToken: String!): Boolean!
  searchForEvents(text: String!): [Event!]!
}

input RegisterUserInput {
  password: String!
  username: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  id: ID!
  organization: Organization!
  role: String!
  username: String!
}
